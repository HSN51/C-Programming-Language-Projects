#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define PI 3.14159
#define MESSAGE "The value must be greater than ZERO."
#define MSG "The value must be greater than ZERO or Width and height must not equal to each other."
typedef struct {
	double area,
		circumference,
		radius;
}circle_t;

typedef struct {
	double area,
		perimeter,
		width,
		height;
}rectangle_t;

typedef struct {
	double area,
		perimeter,
		side;
}square_t;

/* Type of a structure that can be interpreted a different way for each shape */
typedef union {
	circle_t circle;
	rectangle_t rectangle;
	square_t square;
}figure_data_t;

/* Type containing a structure with multiple interpretations along with a component whose value indicates the current valid interpretation */
typedef struct {
	char shape;
	figure_data_t fig;
}figure_t;

figure_t get_figure_dimensions();
figure_t compute_area(figure_t object);
figure_t compute_perim(figure_t object);
void print_figure(figure_t object);

int main()
{
	figure_t onefig;
	printf("Area and Perimeter Computation Program\n");
	for (onefig = get_figure_dimensions();
		onefig.shape != 'Q';
		onefig = get_figure_dimensions()) {
		onefig = compute_area(onefig);
		onefig = compute_perim(onefig);
		print_figure(onefig);
	}
	return 0;
}
/*********************************
 * Prompts for and stores the dimension data necessary to compute a figure's area and perimeter. *
 * Figure returned contains a 'Q' in the shape component when signaling end of data.             *
 *********************************/
figure_t get_figure_dimensions()
{
	figure_t object;
	printf("\Enter a letter to indicate the object shape or Q to quit.\n");
	printf("C (Circle),R (Rectangle),S (Square)> \n");
	scanf(" %c", &object.shape);
	switch (object.shape)
	{
	case 'C': case 'c':
			printf("Enter radius: ");
			scanf("%lf", &object.fig.circle.radius);
			while (object.fig.circle.radius <= 0)
			{
				printf("\t%s\n",MESSAGE);
				printf("Enter radius: ");
				scanf("%lf", &object.fig.circle.radius);
			}
			break;
	case 'R': case 'r':
		printf("Enter height> ");
		scanf("%lf", &object.fig.rectangle.height);
		while (object.fig.rectangle.height <= 0)
		{
			printf("\t%s\n", MESSAGE); 
			printf("Enter height> ");
			scanf("%lf", &object.fig.rectangle.height);
		}
		printf("Enter width> ");
		scanf("%lf", &object.fig.rectangle.width);
		while (object.fig.rectangle.width <= 0 || object.fig.rectangle.height == object.fig.rectangle.width)
		{
			printf("\t%s\n", MSG);
			printf("Enter width> ");
			scanf("%lf", &object.fig.rectangle.width);
		}
		break;
	case 'S': case 's':
		printf("Enter length of a side> ");
		scanf("%lf", &object.fig.square.side);
		while (object.fig.square.side<=0)
		{
			printf("\t%s\n", MESSAGE); 
			printf("Enter length of a side> ");
			scanf("%lf", &object.fig.square.side);
		}
		break;
	default:
		object.shape = 'Q';
		
	}
	return object;
}
/**************************
 * Computes the area of a figure given relevant dimensions.                 *
 * Returns figure with area component filled.                               *
 * Pre: value of shape component is one of these letters: C, c, R, r, S, s  *
 * necessary dimension components have values                               *
 **************************/
figure_t compute_area(figure_t object)
{
	switch (object.shape)
	{
	case 'C':
	case 'c':
		object.fig.circle.area = PI * object.fig.circle.radius + object.fig.circle.radius;
		break;
	case 'R':
	case 'r':
		object.fig.rectangle.area = object.fig.rectangle.width * object.fig.rectangle.height;
		break;
	case 'S':
	case 's':
		object.fig.square.area = object.fig.square.side * object.fig.square.side;
		break;
	default:
		printf("Error in shape detected in compute-area\n");
		
	}
	return object;
}
/*************************
 * Computes the perimeter of a figure given relevant dimensions.           *
 * Returns figure with perimeter component filled.                         *
 * Pre: value of shape component is one of these letters: C, c, R, r, S, s *
 * necessary dimension components have values                              *
 *************************/
figure_t compute_perim(figure_t object)
{

	switch (object.shape)
	{
	case 'C':
	case 'c':
		object.fig.circle.circumference = 2 * PI * object.fig.circle.radius;
		break;
	case 'R':
	case 'r':
		object.fig.rectangle.perimeter = 2 * object.fig.rectangle.height + 2 * object.fig.rectangle.width;
		break;
	case 'S':
	case 's':
		object.fig.square.perimeter = 4 * object.fig.square.side;
		break;
	default:
		printf("Error in shape detected in compute-area\n");

	}
	return object;
}
/* Prints each components of given object. */
void print_figure(figure_t object)
{
	switch (object.shape)
	{
	case 'C':
	case 'c':
		printf("object is a circle whose members:\n");
		printf("\tArea: %.2lf\n\tCircumference: %.2lf\n\tRadius: %.2lf\n", object.fig.circle.area,
			object.fig.circle.circumference, object.fig.circle.radius);
		break;
	case 'R':
	case 'r':
		printf("object is a rectangle whose members:\n");
		printf("\tArea:%.2lf\n\tPerimeter: %.2lf\n\tWidth: %.2lf\n\tHeight: %.2lf\n",object.fig.rectangle.area,object.fig.rectangle.perimeter, object.fig.rectangle.width, object.fig.rectangle.height);
		break;
	case 'S':
	case 's':
		printf("object is a square whose members:\n");
		printf("\tArea:%.2lf\n\tPerimeter: %.2lf\n\tSide: %.2lf\n", object.fig.square.area,
			object.fig.square.perimeter,object.fig.square.side);
		break;
	default:
		printf("Error in shape detected in compute-area\n");

	}
	
}
